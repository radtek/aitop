/* soapServer.cpp
   Generated by gSOAP 2.7.10 from aiwsdl1.txt.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.10 2008-05-03 08:02:18 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:send"))
		return soap_serve_ns1__send(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:send"))
		return soap_serve_ns1__send_(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendFailed"))
		return soap_serve_ns1__sendFailed(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__send(struct soap *soap)
{	struct ns1__send soap_tmp_ns1__send;
	struct ns1__sendResponse soap_tmp_ns1__sendResponse;
	soap_default_ns1__sendResponse(soap, &soap_tmp_ns1__sendResponse);
	soap_default_ns1__send(soap, &soap_tmp_ns1__send);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__send(soap, &soap_tmp_ns1__send, "ns1:send", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__send(soap, soap_tmp_ns1__send._cp_USCOREid, soap_tmp_ns1__send._serviceid, soap_tmp_ns1__send._usernumber, soap_tmp_ns1__send._timelen, soap_tmp_ns1__sendResponse._sendReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__sendResponse(soap, &soap_tmp_ns1__sendResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__sendResponse(soap, &soap_tmp_ns1__sendResponse, "ns1:sendResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__sendResponse(soap, &soap_tmp_ns1__sendResponse, "ns1:sendResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__send_(struct soap *soap)
{	struct ns1__send_ soap_tmp_ns1__send_;
	struct ns1__send_Response soap_tmp_ns1__send_Response;
	soap_default_ns1__send_Response(soap, &soap_tmp_ns1__send_Response);
	soap_default_ns1__send_(soap, &soap_tmp_ns1__send_);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__send_(soap, &soap_tmp_ns1__send_, "ns1:send", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__send_(soap, soap_tmp_ns1__send_._cp_USCOREid, soap_tmp_ns1__send_._serviceid, soap_tmp_ns1__send_._usernumber, soap_tmp_ns1__send_._timelen, soap_tmp_ns1__send_Response._sendReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__send_Response(soap, &soap_tmp_ns1__send_Response);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__send_Response(soap, &soap_tmp_ns1__send_Response, "ns1:send-Response", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__send_Response(soap, &soap_tmp_ns1__send_Response, "ns1:send-Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__sendFailed(struct soap *soap)
{	struct ns1__sendFailed soap_tmp_ns1__sendFailed;
	struct ns1__sendFailedResponse soap_tmp_ns1__sendFailedResponse;
	soap_default_ns1__sendFailedResponse(soap, &soap_tmp_ns1__sendFailedResponse);
	soap_default_ns1__sendFailed(soap, &soap_tmp_ns1__sendFailed);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_ns1__sendFailed(soap, &soap_tmp_ns1__sendFailed, "ns1:sendFailed", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__sendFailed(soap, soap_tmp_ns1__sendFailed._cp_USCOREid, soap_tmp_ns1__sendFailed._serviceid, soap_tmp_ns1__sendFailed._usernumber, soap_tmp_ns1__sendFailed._content, soap_tmp_ns1__sendFailedResponse._sendFailedReturn);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__sendFailedResponse(soap, &soap_tmp_ns1__sendFailedResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__sendFailedResponse(soap, &soap_tmp_ns1__sendFailedResponse, "ns1:sendFailedResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__sendFailedResponse(soap, &soap_tmp_ns1__sendFailedResponse, "ns1:sendFailedResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of soapServer.cpp */
